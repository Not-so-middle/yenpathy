% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/k_shortest_paths.R
\name{k_shortest_paths}
\alias{k_shortest_paths}
\title{Return k shortest paths through a weighted graph.}
\usage{
k_shortest_paths(graph_df, start_vertex, end_vertex, k = 1, from = 1,
  to = 2, weights = "weight", edge_penalty = 0,
  verbose = getOption("yenpathy.verbose", FALSE))
}
\arguments{
\item{graph_df}{A data frame representing the graph's edges, with columns, in
order, for start node, end node, and weight or cost. May also be an iGraph
or tidygraph object.}

\item{start_vertex}{The number or name of the starting vertex.}

\item{end_vertex}{The number or name of the path's ending vertex.}

\item{k}{The maximum number of paths to find, default 1.}

\item{from, to, weights}{columns of the the start node, end node, and weight
of edges in `graph_df`. May be integer or character.}

\item{edge_penalty}{A constant to be added to each edge, if you wish to
penalize routes with many edges.}

\item{verbose}{Be more verbose.}
}
\value{
A list of vectors representing paths through the network, ordered
  from shortest to longest.
}
\description{
This function constructs a graph in C++ and uses Yen's Algorithm to find
shortest paths through the graph, starting and ending at specified nodes.
}
\details{
Your graph's nodes can be integers or characters. If they're character
vectors, the function creates an integer version behind the scenes, but gives
you back a list of character vectors paths.
}
\examples{
my_graph <- data.frame(source = c(1, 4, 5, 1, 1, 8, 1, 2, 7, 3),
                       sink = c(4, 5, 6, 6, 8, 6, 2, 7, 3, 6),
                       weight = c(1, 1, 1, 5, 1.5, 2, 1, 0.5, 0.5, 0.5))
k_shortest_paths(graph_df = my_graph, start_vertex = 1, end_vertex = 6, k = 4)
k_shortest_paths(graph_df = my_graph, start_vertex = 1, end_vertex = 6, k = 4, edge_penalty = 2)

}
